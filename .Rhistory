setwd(old.dir)
1:20
pi:10
15:1
?:
?`:`
seq(q, 20)
seq(1, 20)
seq(0, 10, by= 0.5)
seq(5, 10, length = 30)
my_seq = seq(5, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
library(swirl)
swirl()
swirl()
?num_vect
num_vect <- [0.5, 55, -10, 6]
num_vect <- {0.5, 55, -10, 6}
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name = (my_char, "Ameesha")
my_name <- (my_char, "Ameesha")
my_name <- c(my_char, "Ameesha")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, SEP = "-")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x <- x * 3
info()
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- my_data.is.na()
?is.na()
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x <- c(44, NA, 5, NA)
x <- x * 3
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- my_data.is.na()
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:1-]
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0]
c(1:3:5, x)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- (1:20, 4, 5)
my_matrix2 <- (1:20, 4, 5)
m
my_matrix2 <- (1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_name)
cbind(patients, my_matrix)
my_data <-
| data.frame(patients, my_matrix)
my_data <-data.frame(patients, my_matrix)
my_data
clsdd(my_data)
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
my_data.colnames(cnames)
my_data.colnames(cnames)
my_data.colnames(cnames)
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUW
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 == 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(!0)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any (ints < 0)
all(ints > 0)
swirl()
library(swirl)
swirl()
1 - punif(ÿ4, 0, 10, lower.tail = TRUE)
swirl()
library(swirl)
swirl()
size <- 20
size
probabilities <- dbinom (trails, size, prob)
probabilities <- dbinom (trials, size, prob)
append(dbinom(t, size, prob), probabilities)
dbinom (t, size, prob)
dbinom (t, size, 0.65)
dbinom (trials[1], size, prob)
dbinom (x, size, prob)
prob
prob
prob <- 0.65
prob
size
probabilities <- c()
probabilities
append(dbinom(t, size, prob), probabilities)
probabilities <- dbinom(trails, size, prob)
probabilities <- dbinom(trials, size, prob)
trials
trials <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
trails
trials
probabilities <- dbinom(trials, size, prob)
probabilities
dbinom(0, size, prob)
successes <- factor (trials[1:21])
successes
barplot(probabilities, "Barplot of Data", "Successes", "Binomial Distribution")
barplot(probabilities, "Barplot of Data", "Successes", "Binomial Distribution", c(0, 20), c(0, 1))
barplot(probabilities)
barplot(probabilities, main = "Successes")
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilitie")
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities", successes)
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities")
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities", c(0, 20))
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities", c(0, 20), c(0, 1))
mean(probabilities)
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities")
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities", xlim = c(0, 20))
sd(probabilities)
y <- dnorm (x, mean = 0, sd = 1)
x <- (-3, 3, by = 0.1)
x
x <- seq(-3, 3, by = 0.1)
x
y <- dnorm(x, mean = 0, sd = 1)
y
plot(x, y, main = "Standard Normal Density Function", xlab = "Standard Normal Variable", ylab = "Density")
plot(x, y, l,  main = "Standard Normal Density Function", xlab = "Standard Normal Variable", ylab = "Density")
plot(x, y, type = "l", main = "Standard Normal Density Function", xlab = "Standard Normal Variable", ylab = "Density")
plot(x, y, type = "l", main = "Standard Normal Density Function", xlab = "Standard Normal Variable", ylab = "Density", col = "red")
y <- pnorm(x)
y
plot(x, y, type = "l", main = "Standard Normal CDF Function", xlab = "Standard Normal Variable", ylab = "Probability", col = "blue")
abline(0.05, 0, lty = "2", col = "green")
abline(a = 0.05, b = 0, lty = "2", col = "green")
abline(a = "0.05" , b = "0" , lty = "2", col = "green")
source('~/.active-rstudio-document', echo=TRUE)
abline(h = "0.05", lty = "2", col = "green")
abline(h = "0.05", lty = 2, col = "green")
plot(x, y, type = "l", main = "Standard Normal CDF Function", xlab = "Standard Normal Variable", ylab = "Probability", col = "blue")
abline(h = "0.05", lty = 2, col = "green")
abline(h = "0.25", lty = 2, col = "green")
abline(h = "0.50", lty = 2, col = "green")
abline(h = "0.75", lty = 2, col = "green")
abline(h = "0.95", lty = 2, col = "green")
quant <- quantile(x, y)
quant
quantile(y, c(0.05, 0.25, 0.50, 0.75, 0.95))
quant <- quantile(y, c(0.05, 0.25, 0.50, 0.75, 0.95))
quant
abline(v = i, lty = 1, col = "red")
quant[0]
quant[1]
abline(v = quant[1], lty = 1, color = "red")
abline(v = quant[1], lty = 1, col = "red")
abline(v = quant[2], lty = 1, col = "red")
abline(v = quant[3], lty = 1, col = "red")
abline(v = quant[4], lty = 1, col = "red")
abline(v = quant[5], lty = 1, col = "red")
data <- c(56, 61, 62, 63, 64, 66, 66, 68, 68, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 82, 83, 84, 84, 88, 108)
data
hist(data, breaks = seq(50, 110, by = 10), right = FALSE, main = "Histogram: Bins size 10")
hist(data, breaks = seq(50, 110, by = 5), right = FALSE, main = "Histogram: Bins size 5")
boxplot(data, horizontal = TRUE)
boxplot(data, horizontal = TRUE, main = "Boxplot")
boxplot(data, horizontal = TRUE, main = "Boxplot", ylim = c(50, 110))
mean(data)
variance(data)
var(data)
sd(data)
R.version.string
library(colorblindr)
install.packages(colorblindr)
remotes::install_github("wilkelab/cowplot")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = <DATA>) +
<GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
ggplot(data = mpg)
?mtcars
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
installed.packages("igraph")
installed.packages("igraph")
shiny::runApp('Desktop/CS 424/Project2-CTAMap')
runApp('Desktop/CS 424/Project2-CTAMap')
library(shiny)
library(ggplot2)
library(shinydashboard)
library(lubridate)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
library(readr)
library(leaflet)
#read in the data for stations
temp = list.files(pattern="*.csv", full.name = T)
print(temp)
temp = temp[-148] #delete the last file to be read separately
#read in the files
ridership_data = ldply(temp, read_csv)
print(head(ridership_data))
#read in the list of stops and latitudes and longitudes
stopData <- read.csv(file = 'StopList.csv')
print(head(stopData))
#fix dates using lubridate
ridership_data$newDate = as_date(mdy(ridership_data$date))
#add day, month and year data to csv
ridership_data$year = year(ridership_data$newDate)
ridership_data$month = month(ridership_data$newDate, abbr = TRUE, label = TRUE)
ridership_data$wday = weekdays(as.POSIXct(ridership_data$newDate), abbreviate = T)
#changes rides from character to numeric
ridership_data$rides <- as.numeric(gsub(",","",ridership_data$rides))
print(head(ridership_data))
DateSub <- subset(ridership_data, newDate = "2021-08-23")
ggplot(DateSub, aes(x = stationname, y = rides)) +
stat_summary(fun = sum, geom="bar", colour = "red", width = 0.5) +
theme_bw() +
labs(x = "Station name", y ="Rides") +
theme(text = element_text(family = "sans", face = "bold")) +
theme(plot.title = element_text(hjust = 0.5, size=20), axis.title=element_text(size=12), axis.text.x = element_text(angle = 90))
ibrary(shiny)
library(ggplot2)
library(shinydashboard)
library(lubridate)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
library(readr)
library(leaflet)
#read in the data for stations
temp = list.files(pattern="*.csv", full.name = T)
print(temp)
temp = temp[-148] #delete the last file to be read separately
setwd()
setwd("/Users/ameesha/Desktop/CS 424/Project2-CTAMap")
library(shiny)
library(ggplot2)
library(shinydashboard)
library(lubridate)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
library(readr)
library(leaflet)
library(shiny)
library(ggplot2)
library(shinydashboard)
library(lubridate)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
library(readr)
library(leaflet)
#read in the data for stations
temp = list.files(pattern="*.csv", full.name = T)
print(temp)
temp = temp[-148] #delete the last file to be read separately
#read in the files
ridership_data = ldply(temp, read_csv)
print(head(ridership_data))
#read in the list of stops and latitudes and longitudes
stopData <- read.csv(file = 'StopList.csv')
print(head(stopData))
#fix dates using lubridate
ridership_data$newDate = as_date(mdy(ridership_data$date))
#fix dates using lubridate
ridership_data$newDate = as_date(mdy(ridership_data$date))
#add day, month and year data to csv
ridership_data$year = year(ridership_data$newDate)
ridership_data$month = month(ridership_data$newDate, abbr = TRUE, label = TRUE)
ridership_data$wday = weekdays(as.POSIXct(ridership_data$newDate), abbreviate = T)
#changes rides from character to numeric
ridership_data$rides <- as.numeric(gsub(",","",ridership_data$rides))
print(head(ridership_data))
DateSub <- subset(ridership_data, newDate = "2021-08-23")
ggplot(DateSub, aes(x = stationname, y = rides)) +
stat_summary(fun = sum, geom="bar", colour = "red", width = 0.5) +
theme_bw() +
labs(x = "Station name", y ="Rides") +
theme(text = element_text(family = "sans", face = "bold")) +
theme(plot.title = element_text(hjust = 0.5, size=20), axis.title=element_text(size=12), axis.text.x = element_text(angle = 90))
print(DateSub)
DateSub <- subset(ridership_data, newDate == "2021-08-23")
print(DateSub)
ggplot(DateSub, aes(x = stationname, y = rides)) +
stat_summary(fun = sum, geom="bar", colour = "red", width = 0.5) +
theme_bw() +
labs(x = "Station name", y ="Rides") +
theme(text = element_text(family = "sans", face = "bold")) +
theme(plot.title = element_text(hjust = 0.5, size=20), axis.title=element_text(size=12), axis.text.x = element_text(angle = 90))
m <- leaflet()
m <- addTiles(m)
station_ids = strsplit(temp, "./")
m
runApp()
getwd()
DateSub <- subset(ridership_data, newDate == "2021-08-23")
print(DateSub)
m <- leaflet()
m <- addTiles(m)
m <- addProviderTiles(providers$CartoDB.Positron)
names(providers)
m <- addProviderTiles("Esri.WorldStreetMap")
m <- addTiles(m)
m <- addProviderTiles("Esri.WorldStreetMap")
m <- addProviderTiles(providers[54])
m <- addProviderTiles(providers[["Esri.WorldStreetMap"]])
m <- addProviderTiles(providers[["Esri.WorldStreetMap"]])
m <- addProviderTiles("Esri.WorldStreetMap")
print(providers)
print(providers$Esri)
m <- addProviderTiles(providers$Esri)
m <- leaflet()
#m <- addTiles(m)
m <- addProviderTiles(providers$Esri)
m <- leaflet()
m <- addTiles(m)
m <- addProviderTiles("Esri.WorldStreetMap")
m <- leaflet()
m <- addTiles(m)
m <- addProviderTiles("Esri.WorldStreetMap")
providers <- data.frame(as.list(providers))    # Convert named vector to data.frame
providers
m <- leaflet()
m <- addTiles(m)
m <- addProviderTiles("Esri.WorldStreetMap")
m <- addProviderTiles(providers$Esri.WorldStreetMap)
install.packages("leaflet.providers")
devtools::install_github("rstudio/leaflet.providers")
install.packages("leaflet.providers")
providers
m <- leaflet()
library(shiny)
library(ggplot2)
library(shinydashboard)
library(lubridate)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
library(readr)
library(leaflet)
library(leaflet.providers)
getwd()
#read in the data for stations
temp = list.files(pattern="*.csv", full.name = T)
print(temp)
temp = temp[-148] #delete the last file to be read separately
#read in the files
ridership_data = ldply(temp, read_csv)
print(head(ridership_data))
#read in the list of stops and latitudes and longitudes
stopData <- read.csv(file = 'StopList.csv')
print(head(stopData))
#fix dates using lubridate
ridership_data$newDate = as_date(mdy(ridership_data$date))
#add day, month and year data to csv
ridership_data$year = year(ridership_data$newDate)
ridership_data$month = month(ridership_data$newDate, abbr = TRUE, label = TRUE)
ridership_data$wday = weekdays(as.POSIXct(ridership_data$newDate), abbreviate = T)
#changes rides from character to numeric
ridership_data$rides <- as.numeric(gsub(",","",ridership_data$rides))
print(head(ridership_data))
DateSub <- subset(ridership_data, newDate == "2021-08-23")
print(DateSub)
ggplot(DateSub, aes(x = stationname, y = rides)) +
stat_summary(fun = sum, geom="bar", colour = "red", width = 0.5) +
theme_bw() +
labs(x = "Station name", y ="Rides") +
theme(text = element_text(family = "sans", face = "bold")) +
theme(plot.title = element_text(hjust = 0.5, size=20), axis.title=element_text(size=12), axis.text.x = element_text(angle = 90))
w#geom_bar(stat = "identity", fill = "#91b3bb", width=0.8) +
head(stopData)
m <- leaflet()
m <- addTiles(m)
m <- addProviderTiles(providers$Esri.WorldStreetMap)
print(providers$Esri.WorldStreetMap)
astation_ids = strsplit(temp, "./")
str(providers_default())
print(providers)
print(providers_default())
print(leaflet.providers)
print(get_providers())
use_providers()
m <- leaflet()
m <- addTiles(m)
m <- addProviderTiles(providers$Esri.WorldStreetMap)
str(providers_loaded()$providers)
str(providers_loaded()$providers$Esri)
str(providers_loaded()$providers$Esri.WorldStreetMap)
m <- addProviderTiles(providers_loaded()$providers$Esri.WorldStreetMap)
