install.packages("swirl")
yes
install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z);
my_sqrt <- sqrt(z)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 100
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir = getwd()
old.dir <- getwd()
dir.create(testdir)
dir.create()
dir.create(getwd()) <- testdir
?dir.create
dir.create(getwd())
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
?file.path
file.path("mytest3.R")
file.path('folder1')
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd()
setwd(old.dir)
1:20
pi:10
15:1
?:
?`:`
seq(q, 20)
seq(1, 20)
seq(0, 10, by= 0.5)
seq(5, 10, length = 30)
my_seq = seq(5, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
library(swirl)
swirl()
swirl()
?num_vect
num_vect <- [0.5, 55, -10, 6]
num_vect <- {0.5, 55, -10, 6}
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name = (my_char, "Ameesha")
my_name <- (my_char, "Ameesha")
my_name <- c(my_char, "Ameesha")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, SEP = "-")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x <- x * 3
info()
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- my_data.is.na()
?is.na()
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x <- c(44, NA, 5, NA)
x <- x * 3
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- my_data.is.na()
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:1-]
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0]
c(1:3:5, x)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- (1:20, 4, 5)
my_matrix2 <- (1:20, 4, 5)
m
my_matrix2 <- (1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_name)
cbind(patients, my_matrix)
my_data <-
| data.frame(patients, my_matrix)
my_data <-data.frame(patients, my_matrix)
my_data
clsdd(my_data)
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
my_data.colnames(cnames)
my_data.colnames(cnames)
my_data.colnames(cnames)
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUW
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 == 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(!0)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any (ints < 0)
all(ints > 0)
swirl()
library(swirl)
swirl()
1 - punif(ÿ4, 0, 10, lower.tail = TRUE)
swirl()
library(swirl)
swirl()
size <- 20
size
probabilities <- dbinom (trails, size, prob)
probabilities <- dbinom (trials, size, prob)
append(dbinom(t, size, prob), probabilities)
dbinom (t, size, prob)
dbinom (t, size, 0.65)
dbinom (trials[1], size, prob)
dbinom (x, size, prob)
prob
prob
prob <- 0.65
prob
size
probabilities <- c()
probabilities
append(dbinom(t, size, prob), probabilities)
probabilities <- dbinom(trails, size, prob)
probabilities <- dbinom(trials, size, prob)
trials
trials <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
trails
trials
probabilities <- dbinom(trials, size, prob)
probabilities
dbinom(0, size, prob)
successes <- factor (trials[1:21])
successes
barplot(probabilities, "Barplot of Data", "Successes", "Binomial Distribution")
barplot(probabilities, "Barplot of Data", "Successes", "Binomial Distribution", c(0, 20), c(0, 1))
barplot(probabilities)
barplot(probabilities, main = "Successes")
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilitie")
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities", successes)
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities")
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities", c(0, 20))
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities", c(0, 20), c(0, 1))
mean(probabilities)
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities")
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities", xlim = c(0, 20))
sd(probabilities)
y <- dnorm (x, mean = 0, sd = 1)
x <- (-3, 3, by = 0.1)
x
x <- seq(-3, 3, by = 0.1)
x
y <- dnorm(x, mean = 0, sd = 1)
y
plot(x, y, main = "Standard Normal Density Function", xlab = "Standard Normal Variable", ylab = "Density")
plot(x, y, l,  main = "Standard Normal Density Function", xlab = "Standard Normal Variable", ylab = "Density")
plot(x, y, type = "l", main = "Standard Normal Density Function", xlab = "Standard Normal Variable", ylab = "Density")
plot(x, y, type = "l", main = "Standard Normal Density Function", xlab = "Standard Normal Variable", ylab = "Density", col = "red")
y <- pnorm(x)
y
plot(x, y, type = "l", main = "Standard Normal CDF Function", xlab = "Standard Normal Variable", ylab = "Probability", col = "blue")
abline(0.05, 0, lty = "2", col = "green")
abline(a = 0.05, b = 0, lty = "2", col = "green")
abline(a = "0.05" , b = "0" , lty = "2", col = "green")
source('~/.active-rstudio-document', echo=TRUE)
abline(h = "0.05", lty = "2", col = "green")
abline(h = "0.05", lty = 2, col = "green")
plot(x, y, type = "l", main = "Standard Normal CDF Function", xlab = "Standard Normal Variable", ylab = "Probability", col = "blue")
abline(h = "0.05", lty = 2, col = "green")
abline(h = "0.25", lty = 2, col = "green")
abline(h = "0.50", lty = 2, col = "green")
abline(h = "0.75", lty = 2, col = "green")
abline(h = "0.95", lty = 2, col = "green")
quant <- quantile(x, y)
quant
quantile(y, c(0.05, 0.25, 0.50, 0.75, 0.95))
quant <- quantile(y, c(0.05, 0.25, 0.50, 0.75, 0.95))
quant
abline(v = i, lty = 1, col = "red")
quant[0]
quant[1]
abline(v = quant[1], lty = 1, color = "red")
abline(v = quant[1], lty = 1, col = "red")
abline(v = quant[2], lty = 1, col = "red")
abline(v = quant[3], lty = 1, col = "red")
abline(v = quant[4], lty = 1, col = "red")
abline(v = quant[5], lty = 1, col = "red")
data <- c(56, 61, 62, 63, 64, 66, 66, 68, 68, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 82, 83, 84, 84, 88, 108)
data
hist(data, breaks = seq(50, 110, by = 10), right = FALSE, main = "Histogram: Bins size 10")
hist(data, breaks = seq(50, 110, by = 5), right = FALSE, main = "Histogram: Bins size 5")
boxplot(data, horizontal = TRUE)
boxplot(data, horizontal = TRUE, main = "Boxplot")
boxplot(data, horizontal = TRUE, main = "Boxplot", ylim = c(50, 110))
mean(data)
variance(data)
var(data)
sd(data)
R.version.string
library(colorblindr)
install.packages(colorblindr)
remotes::install_github("wilkelab/cowplot")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = <DATA>) +
<GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
ggplot(data = mpg)
?mtcars
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
installed.packages("igraph")
installed.packages("igraph")
shiny::runApp('Desktop/CS 424/Project2-CTAMap')
date = as_date("2021-01-01")
date
date <- as_date("2021-01-01")
print(date)
ibrary(shiny)
library(ggplot2)
library(shinydashboard)
library(lubridate)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
library(readr)
library(leaflet)
library(leaflet.providers)
marker_radius <- function(num_rides) {
library(shiny)
library(ggplot2)
library(shinydashboard)
library(lubridate)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
library(readr)
library(leaflet)
library(leaflet.providers)
marker_radius <- function(num_rides) {
radius = 0
if (num_rides < 1000.0){
radius = 4
}
else if (num_rides < 2000.0){
radius = 6
}
else if (num_rides < 2500.0){
radius = 8
}
else if(num_rides < 4000.0){
radius = 10
}
else{
radius = 12
}
return (radius)
}
date <- as_date("2021-01-01")
print(date)
date
dateNew <- as_date("2021-01-01")
date
dateNew <- as_date("01-01-2021")
date
dateNew <- dmy("14/10/1979")
date
dateNew <-ymd("20110604")
date
month(date)
library(lubridate)
print(temp)
temp = temp[-148] #delete the last file to be read separately
#read in the files
ridership_data = ldply(temp, read_csv)
dateNew <-ymd("20110604")
date
getwd()
library(lubridate)
dateNew <-ymd("20110604")
date
month(date)
date+1
shiny::runApp('Desktop/CS 424/Project2-CTAMap')
m <- addCircleMarkers(m, lng=mat[1,2], lat=mat[1,1],
#popup=a$STOP_NAME[1],
popup = paste(sep="",
"<b>", a$STOP_NAME[1],"</b>","<br/>",
"<b>", dateSubSums[i, "x"], "</b>",
),
radius = marker_radius(dateSubSums[i, "x"]))
for (i in 1:nrow(dateSubSums)){
#i = strsplit(i[2], ".csv")
print(typeof(dateSubSums[i, "x"]))
a <- subset(stopData, MAP_ID == dateSubSums[i, "station_id"])
string <- a$Location[1]
mat = matrix(scan(text = gsub("[()]", "", string), sep = ","),
ncol = 2, byrow = TRUE, dimnames = list(NULL, c("Lat", "Long")))
m <- addCircleMarkers(m, lng=mat[1,2], lat=mat[1,1],
#popup=a$STOP_NAME[1],
popup = paste(sep="",
"<b>", a$STOP_NAME[1],"</b>","<br/>",
"<b>", dateSubSums[i, "x"], "</b>",
),
radius = marker_radius(dateSubSums[i, "x"]))
}
runApp('Desktop/CS 424/Project2-CTAMap')
